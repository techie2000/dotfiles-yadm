# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color) color_prompt=yes;;
  screen-256color) color_prompt=yes;;
  screen) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac


#!/usr/bin/env bash
# based on bash-powerline.sh

__powerline() {

    # Solarized colorscheme
    readonly FG_BASE03="\[$(tput setaf 8)\]"
    readonly FG_BASE02="\[$(tput setaf 0)\]"
    readonly FG_BASE01="\[$(tput setaf 10)\]"
    readonly FG_BASE00="\[$(tput setaf 11)\]"
    readonly FG_BASE0="\[$(tput setaf 12)\]"
    readonly FG_BASE1="\[$(tput setaf 14)\]"
    readonly FG_BASE2="\[$(tput setaf 7)\]"
    readonly FG_BASE3="\[$(tput setaf 15)\]"

    readonly BG_BASE03="\[$(tput setab 8)\]"
    readonly BG_BASE02="\[$(tput setab 0)\]"
    readonly BG_BASE01="\[$(tput setab 10)\]"
    readonly BG_BASE00="\[$(tput setab 11)\]"
    readonly BG_BASE0="\[$(tput setab 12)\]"
    readonly BG_BASE1="\[$(tput setab 14)\]"
    readonly BG_BASE2="\[$(tput setab 7)\]"
    readonly BG_BASE3="\[$(tput setab 15)\]"

    readonly FG_YELLOW="\[$(tput setaf 3)\]"
    readonly FG_ORANGE="\[$(tput setaf 9)\]"
    readonly FG_RED="\[$(tput setaf 1)\]"
    readonly FG_MAGENTA="\[$(tput setaf 5)\]"
    readonly FG_VIOLET="\[$(tput setaf 13)\]"
    readonly FG_BLUE="\[$(tput setaf 4)\]"
    readonly FG_CYAN="\[$(tput setaf 6)\]"
    readonly FG_GREEN="\[$(tput setaf 2)\]"

    readonly BG_YELLOW="\[$(tput setab 3)\]"
    readonly BG_ORANGE="\[$(tput setab 9)\]"
    readonly BG_RED="\[$(tput setab 1)\]"
    readonly BG_MAGENTA="\[$(tput setab 5)\]"
    readonly BG_VIOLET="\[$(tput setab 13)\]"
    readonly BG_BLUE="\[$(tput setab 4)\]"
    readonly BG_CYAN="\[$(tput setab 6)\]"
    readonly BG_GREEN="\[$(tput setab 2)\]"

    readonly DIM="\[$(tput dim)\]"
    readonly REVERSE="\[$(tput rev)\]"
    readonly RESET="\[$(tput sgr0)\]"
    readonly BOLD="\[$(tput bold)\]"
    readonly CLEAR="\[$(tput el)\]"

    # Unicode symbols
    readonly GIT_BRANCH_SYMBOL='î‚  '
    readonly GIT_BRANCH_CHANGED_SYMBOL='*'
    readonly GIT_BRANCH_CLEAN_SYMBOL='âœ”ï¸Ž'
    readonly GIT_NEED_PUSH_SYMBOL='â‡¡'
    readonly GIT_NEED_PULL_SYMBOL='â‡£'

    # what terminal?
    case "$TERM_PROGRAM" in
        iTerm.app)
            readonly PS_SYMBOL="ðŸ‘‰ "
            readonly PS_SYMBOL_ERROR="\aðŸ’¥"
            ;;
        Apple_Terminal)
            readonly PS_SYMBOL="ðŸ‘‰ "
            readonly PS_SYMBOL_ERROR="\aðŸ’¥"
            ;;
        *)
            readonly PS_SYMBOL=$FG_GREEN"î‚°"
            readonly PS_SYMBOL_ERROR=$FG_RED"\aî‚°"
    esac

    __git_info() {
        [ -x "$(which git)" ] || return    # git not found

        local git_eng="env LANG=C git"   # force git output in English to make our work easier
        # get current branch name or short SHA1 hash for detached head
        local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"
        [ -n "$branch" ] || return  # git branch not found

        local marks

        # how many commits local branch is ahead/behind of remote?
        local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
        local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
        local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
        [ -n "$aheadN" ] && marks+="$BG_BLUE$FG_BASE02 $GIT_NEED_PUSH_SYMBOL$aheadN $RESET"
        [ -n "$behindN" ] && marks+="$BG_BLUE$FG_BASE02 $GIT_NEED_PULL_SYMBOL$behindN $RESET"

        # branch is modified?
        [ -n "$($git_eng status --porcelain)" ] && marks+="$BG_ORANGE$FG_BASE02 $GIT_BRANCH_CHANGED_SYMBOL $RESET" || marks+="$BG_GREEN$FG_BASE02 $GIT_BRANCH_CLEAN_SYMBOL$RESET"

        # print the git branch segment without a trailing newline
        printf " $GIT_BRANCH_SYMBOL$branch $marks "
    }

    ps1() {
        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly.

        if [ $? -eq 0 ]; then
            local BG_EXIT=$PS_SYMBOL
        else
            local BG_EXIT=$PS_SYMBOL_ERROR
        fi

        # PS1="$BG_BASE0 $RESET$BG_BASE1 $RESET$BG_BASE2 $RESET$BG_BASE3 $RESET$BG_BASE00 $RESET$BG_BASE01 $RESET$BG_BASE02 $RESET$BG_BASE03 $RESET \n"
        # PS1+="$BG_YELLOW $RESET$BG_ORANGE $RESET$BG_RED $RESET$BG_MAGENTA $RESET$BG_VIOLET $RESET$BG_BLUE $RESET$BG_CYAN $RESET$BG_GREEN $RESET \n"
        # PS1+="$BOLD$BG_YELLOW $BG_ORANGE $BG_RED $BG_MAGENTA $BG_VIOLET $BG_BLUE $BG_CYAN $BG_GREEN $RESET \n"
        PS1="$BG_CYAN$FG_BASE02 \A $RESET"
        PS1+="$BG_YELLOW$FG_BASE02 \w $RESET"
        PS1+="$BG_MAGENTA$FG_BASE02$(__git_info)$RESET$CLEAR"
        PS1+="\n"
        PS1+="$BG_EXIT $RESET"
    }

    setItermTitle() {
        if [ $ITERM_SESSION_ID ]; then
            echo -ne "\033];${PWD##*/}\007";
        fi
    }

    export PROMPT_COMMAND="setItermTitle; ps1; $PROMPT_COMMAND"
}

__powerline
unset __powerline
